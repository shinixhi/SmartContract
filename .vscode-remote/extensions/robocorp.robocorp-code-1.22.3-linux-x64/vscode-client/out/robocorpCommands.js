"use strict";
// Warning: Don't edit file (autogenerated from python -m dev codegen).
Object.defineProperty(exports, "__esModule", { value: true });
exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_BROWSER = exports.ROBOCORP_OPEN_CLOUD_HOME = exports.ROBOCORP_OPEN_LOCATORS_JSON = exports.ROBOCORP_REMOVE_LOCATOR_FROM_JSON = exports.ROBOCORP_REMOVE_LOCATOR_FROM_JSON_INTERNAL = exports.ROBOCORP_GET_LOCATORS_JSON_INFO = exports.ROBOCORP_REFRESH_CLOUD_VIEW = exports.ROBOCORP_RENAME_RESOURCE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_DELETE_RESOURCE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_NEW_FOLDER_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_NEW_FILE_IN_ROBOT_CONTENT_VIEW = exports.ROBOCORP_REFRESH_ROBOT_CONTENT_VIEW = exports.ROBOCORP_REFRESH_ROBOTS_VIEW = exports.ROBOCORP_CLOUD_LOGOUT_INTERNAL = exports.ROBOCORP_CLOUD_LOGOUT = exports.ROBOCORP_RESOLVE_INTERPRETER = exports.ROBOCORP_SET_PYTHON_INTERPRETER = exports.ROBOCORP_COMPUTE_ROBOT_LAUNCH_FROM_ROBOCORP_CODE_LAUNCH = exports.ROBOCORP_LOAD_FROM_DISK_LRU = exports.ROBOCORP_SAVE_IN_DISK_LRU = exports.ROBOCORP_DEBUG_ROBOCORPS_PYTHON_TASK = exports.ROBOCORP_RUN_ROBOCORPS_PYTHON_TASK = exports.ROBOCORP_ROBOTS_VIEW_ACTION_OPEN = exports.ROBOCORP_ROBOTS_VIEW_ACTION_EDIT_INPUT = exports.ROBOCORP_ROBOTS_VIEW_ACTION_DEBUG = exports.ROBOCORP_ROBOTS_VIEW_ACTION_RUN = exports.ROBOCORP_ROBOTS_VIEW_TASK_DEBUG = exports.ROBOCORP_ROBOTS_VIEW_TASK_RUN = exports.ROBOCORP_DEBUG_ACTION_FROM_ACTION_PACKAGE = exports.ROBOCORP_DEBUG_ROBOT_RCC = exports.ROBOCORP_RUN_ACTION_FROM_ACTION_PACKAGE = exports.ROBOCORP_RUN_ROBOT_RCC = exports.ROBOCORP_RUN_IN_RCC_INTERNAL = exports.ROBOCORP_UPLOAD_TO_EXISTING_ROBOT_INTERNAL = exports.ROBOCORP_UPLOAD_TO_NEW_ROBOT_INTERNAL = exports.ROBOCORP_CLOUD_LIST_WORKSPACES_INTERNAL = exports.ROBOCORP_CLOUD_LOGIN_INTERNAL = exports.ROBOCORP_CLOUD_LOGIN = exports.ROBOCORP_GET_LINKED_ACCOUNT_INFO_INTERNAL = exports.ROBOCORP_IS_LOGIN_NEEDED_INTERNAL = exports.ROBOCORP_LOCAL_LIST_ROBOTS_INTERNAL = exports.ROBOCORP_UPLOAD_ROBOT_TO_CLOUD = exports.ROBOCORP_CREATE_ROBOT_INTERNAL = exports.ROBOCORP_LIST_ROBOT_TEMPLATES_INTERNAL = exports.ROBOCORP_CREATE_TASK_OR_ACTION_PACKAGE = exports.ROBOCORP_CREATE_ACTION_PACKAGE = exports.ROBOCORP_CREATE_ROBOT = exports.ROBOCORP_GET_PLUGINS_DIR = exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON_INFO = exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON = void 0;
exports.ROBOCORP_PROFILE_LIST_INTERNAL = exports.ROBOCORP_PROFILE_SWITCH_INTERNAL = exports.ROBOCORP_PROFILE_SWITCH = exports.ROBOCORP_PROFILE_IMPORT_INTERNAL = exports.ROBOCORP_PROFILE_IMPORT = exports.ROBOCORP_CONVERT_PROJECT = exports.ROBOCORP_OPEN_FLOW_EXPLORER_TREE_SELECTION = exports.ROBOCORP_SHOW_INTERPRETER_ENV_ERROR = exports.ROBOCORP_SHOW_OUTPUT = exports.ROBOCORP_CLEAR_ENV_AND_RESTART = exports.ROBOCORP_OPEN_VAULT_HELP = exports.ROBOCORP_SET_CONNECTED_VAULT_WORKSPACE_INTERNAL = exports.ROBOCORP_GET_CONNECTED_VAULT_WORKSPACE_INTERNAL = exports.ROBOCORP_DISCONNECT_WORKSPACE = exports.ROBOCORP_CONNECT_WORKSPACE = exports.ROBOCORP_VERIFY_LIBRARY_VERSION_INTERNAL = exports.ROBOCORP_CONVERT_OUTPUT_WORK_ITEM_TO_INPUT = exports.ROBOCORP_HELP_WORK_ITEMS = exports.ROBOCORP_DELETE_WORK_ITEM_IN_WORK_ITEMS_VIEW = exports.ROBOCORP_NEW_WORK_ITEM_IN_WORK_ITEMS_VIEW = exports.ROBOCORP_UPDATE_LAUNCH_ENV_GET_VAULT_ENV_INTERNAL = exports.ROBOCORP_UPDATE_LAUNCH_ENV = exports.ROBOCORP_LIST_WORK_ITEMS_INTERNAL = exports.ROBOCORP_RCC_TERMINAL_NEW = exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS = exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS_INTERNAL = exports.ROBOCORP_FEEDBACK_INTERNAL = exports.ROBOCORP_ERROR_FEEDBACK_INTERNAL = exports.ROBOCORP_INSPECTOR_DUPLICATE = exports.ROBOCORP_INSPECTOR = exports.ROBOCORP_INSPECTOR_INTERNAL = exports.ROBOCORP_SUBMIT_ISSUE = exports.ROBOCORP_SUBMIT_ISSUE_INTERNAL = exports.ROBOCORP_SEND_METRIC = exports.ROBOCORP_CREATE_RCC_TERMINAL_TREE_SELECTION = exports.ROBOCORP_CLOUD_UPLOAD_ROBOT_TREE_SELECTION = exports.ROBOCORP_REVEAL_ROBOT_IN_EXPLORER = exports.ROBOCORP_REVEAL_IN_EXPLORER = exports.ROBOCORP_OPEN_IN_VS_CODE = exports.ROBOCORP_OPEN_EXTERNALLY = exports.ROBOCORP_OPEN_PACKAGE_YAML_TREE_SELECTION = exports.ROBOCORP_OPEN_ROBOT_CONDA_TREE_SELECTION = exports.ROBOCORP_OPEN_ROBOT_TREE_SELECTION = exports.ROBOCORP_COPY_LOCATOR_TO_CLIPBOARD_INTERNAL = exports.ROBOCORP_EDIT_ROBOCORP_INSPECTOR_LOCATOR = exports.ROBOCORP_OPEN_PLAYWRIGHT_RECORDER_INTERNAL = exports.ROBOCORP_OPEN_PLAYWRIGHT_RECORDER = exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_JAVA = exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_IMAGE = exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_WINDOWS = void 0;
exports.ROBOCORP_PACKAGE_ENVIRONMENT_REBUILD = exports.ROBOCORP_LIST_ACTIONS_INTERNAL = exports.ROBOCORP_START_ACTION_SERVER_INTERNAL = exports.ROBOCORP_DOWNLOAD_ACTION_SERVER = exports.ROBOCORP_START_ACTION_SERVER = exports.ROBOCORP_GET_PY_PI_BASE_URLS_INTERNAL = exports.ROBOCORP_RUN_PRE_RUN_SCRIPTS_INTERNAL = exports.ROBOCORP_HAS_PRE_RUN_SCRIPTS_INTERNAL = void 0;
exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON = "robocorp.getLanguageServerPython"; // Get a python executable suitable to start the language server
exports.ROBOCORP_GET_LANGUAGE_SERVER_PYTHON_INFO = "robocorp.getLanguageServerPythonInfo"; // Get info suitable to start the language server {pythonExe, environ}
exports.ROBOCORP_GET_PLUGINS_DIR = "robocorp.getPluginsDir"; // Get the directory for plugins
exports.ROBOCORP_CREATE_ROBOT = "robocorp.createRobot"; // Create Task Package (Robot)
exports.ROBOCORP_CREATE_ACTION_PACKAGE = "robocorp.createActionPackage"; // Create Action Package
exports.ROBOCORP_CREATE_TASK_OR_ACTION_PACKAGE = "robocorp.createTaskOrActionPackage"; // Create Action Package
exports.ROBOCORP_LIST_ROBOT_TEMPLATES_INTERNAL = "robocorp.listRobotTemplates.internal"; // Provides a list with the available Task Package (Robot) templates
exports.ROBOCORP_CREATE_ROBOT_INTERNAL = "robocorp.createRobot.internal"; // Actually calls rcc to create the Task Package (Robot)
exports.ROBOCORP_UPLOAD_ROBOT_TO_CLOUD = "robocorp.uploadRobotToCloud"; // Upload Task Package (Robot) to Control Room
exports.ROBOCORP_LOCAL_LIST_ROBOTS_INTERNAL = "robocorp.localListRobots.internal"; // Lists the activities currently available in the workspace
exports.ROBOCORP_IS_LOGIN_NEEDED_INTERNAL = "robocorp.isLoginNeeded.internal"; // Checks if the user is already linked to an account
exports.ROBOCORP_GET_LINKED_ACCOUNT_INFO_INTERNAL = "robocorp.getLinkedAccountInfo.internal"; // Provides information related to the current linked account
exports.ROBOCORP_CLOUD_LOGIN = "robocorp.cloudLogin"; // Link to Control Room
exports.ROBOCORP_CLOUD_LOGIN_INTERNAL = "robocorp.cloudLogin.internal"; // Link to Control Room (receives credentials)
exports.ROBOCORP_CLOUD_LIST_WORKSPACES_INTERNAL = "robocorp.cloudListWorkspaces.internal"; // Lists the workspaces available for the user (in the Control Room)
exports.ROBOCORP_UPLOAD_TO_NEW_ROBOT_INTERNAL = "robocorp.uploadToNewRobot.internal"; // Uploads a Task Package (Robot) as a new Task Package (Robot) in the Control Room
exports.ROBOCORP_UPLOAD_TO_EXISTING_ROBOT_INTERNAL = "robocorp.uploadToExistingRobot.internal"; // Uploads a Task Package (Robot) as an existing Task Package (Robot) in the Control Room
exports.ROBOCORP_RUN_IN_RCC_INTERNAL = "robocorp.runInRcc.internal"; // Runs a custom command in RCC
exports.ROBOCORP_RUN_ROBOT_RCC = "robocorp.runRobotRcc"; // Run Task Package (Robot)
exports.ROBOCORP_RUN_ACTION_FROM_ACTION_PACKAGE = "robocorp.runActionFromActionPackage"; // Run Action (from Action Package)
exports.ROBOCORP_DEBUG_ROBOT_RCC = "robocorp.debugRobotRcc"; // Debug Task Package (Robot)
exports.ROBOCORP_DEBUG_ACTION_FROM_ACTION_PACKAGE = "robocorp.debugActionFromActionPackage"; // Debug Action (from Action Package)
exports.ROBOCORP_ROBOTS_VIEW_TASK_RUN = "robocorp.robotsViewTaskRun"; // Launch Task
exports.ROBOCORP_ROBOTS_VIEW_TASK_DEBUG = "robocorp.robotsViewTaskDebug"; // Debug Task
exports.ROBOCORP_ROBOTS_VIEW_ACTION_RUN = "robocorp.robotsViewActionRun"; // Launch Action
exports.ROBOCORP_ROBOTS_VIEW_ACTION_DEBUG = "robocorp.robotsViewActionDebug"; // Debug Action
exports.ROBOCORP_ROBOTS_VIEW_ACTION_EDIT_INPUT = "robocorp.robotsViewActionEditInput"; // Configure Action Input
exports.ROBOCORP_ROBOTS_VIEW_ACTION_OPEN = "robocorp.robotsViewActionOpen"; // Open Action
exports.ROBOCORP_RUN_ROBOCORPS_PYTHON_TASK = "robocorp.runRobocorpsPythonTask"; // Run Robocorp's Python Task
exports.ROBOCORP_DEBUG_ROBOCORPS_PYTHON_TASK = "robocorp.debugRobocorpsPythonTask"; // Debug Robocorp's Python Task
exports.ROBOCORP_SAVE_IN_DISK_LRU = "robocorp.saveInDiskLRU"; // Saves some data in an LRU in the disk
exports.ROBOCORP_LOAD_FROM_DISK_LRU = "robocorp.loadFromDiskLRU"; // Loads some LRU data from the disk
exports.ROBOCORP_COMPUTE_ROBOT_LAUNCH_FROM_ROBOCORP_CODE_LAUNCH = "robocorp.computeRobotLaunchFromRobocorpCodeLaunch"; // Computes a Task Package (Robot) launch debug configuration based on the robocorp code launch debug configuration
exports.ROBOCORP_SET_PYTHON_INTERPRETER = "robocorp.setPythonInterpreter"; // Set python executable based on robot.yaml
exports.ROBOCORP_RESOLVE_INTERPRETER = "robocorp.resolveInterpreter"; // Resolves the interpreter to be used given a path
exports.ROBOCORP_CLOUD_LOGOUT = "robocorp.cloudLogout"; // Unlink and remove credentials from Control Room
exports.ROBOCORP_CLOUD_LOGOUT_INTERNAL = "robocorp.cloudLogout.internal"; // Unlink and remove credentials from Control Room internal
exports.ROBOCORP_REFRESH_ROBOTS_VIEW = "robocorp.refreshRobotsView"; // Refresh Task Packages (Robots) view
exports.ROBOCORP_REFRESH_ROBOT_CONTENT_VIEW = "robocorp.refreshRobotContentView"; // Refresh Task Package (Robot) Content view
exports.ROBOCORP_NEW_FILE_IN_ROBOT_CONTENT_VIEW = "robocorp.newFileInRobotContentView"; // New File
exports.ROBOCORP_NEW_FOLDER_IN_ROBOT_CONTENT_VIEW = "robocorp.newFolderInRobotContentView"; // New Folder
exports.ROBOCORP_DELETE_RESOURCE_IN_ROBOT_CONTENT_VIEW = "robocorp.deleteResourceInRobotContentView"; // Delete
exports.ROBOCORP_RENAME_RESOURCE_IN_ROBOT_CONTENT_VIEW = "robocorp.renameResourceInRobotContentView"; // Rename
exports.ROBOCORP_REFRESH_CLOUD_VIEW = "robocorp.refreshCloudView"; // Refresh Robocorp view
exports.ROBOCORP_GET_LOCATORS_JSON_INFO = "robocorp.getLocatorsJsonInfo"; // Obtain information from the locators.json given a robot.yaml
exports.ROBOCORP_REMOVE_LOCATOR_FROM_JSON_INTERNAL = "robocorp.removeLocatorFromJson.internal"; // Remove a named locator from locators.json
exports.ROBOCORP_REMOVE_LOCATOR_FROM_JSON = "robocorp.removeLocatorFromJson"; // Remove Locator
exports.ROBOCORP_OPEN_LOCATORS_JSON = "robocorp.openLocatorsJson"; // Open locators.json
exports.ROBOCORP_OPEN_CLOUD_HOME = "robocorp.openCloudHome"; // Open cloud home
exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_BROWSER = "robocorp.newRobocorpInspectorBrowser"; // Add Web Locator
exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_WINDOWS = "robocorp.newRobocorpInspectorWindows"; // Add Windows Locator
exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_IMAGE = "robocorp.newRobocorpInspectorImage"; // Add Image Locator
exports.ROBOCORP_NEW_ROBOCORP_INSPECTOR_JAVA = "robocorp.newRobocorpInspectorJava"; // Add Java Locator
exports.ROBOCORP_OPEN_PLAYWRIGHT_RECORDER = "robocorp.openPlaywrightRecorder"; // Open Playwright Recorder
exports.ROBOCORP_OPEN_PLAYWRIGHT_RECORDER_INTERNAL = "robocorp.openPlaywrightRecorder.internal"; // Open Playwright Recorder Internal
exports.ROBOCORP_EDIT_ROBOCORP_INSPECTOR_LOCATOR = "robocorp.editRobocorpInspectorLocator"; // Edit locator
exports.ROBOCORP_COPY_LOCATOR_TO_CLIPBOARD_INTERNAL = "robocorp.copyLocatorToClipboard.internal"; // Copy locator name to clipboard
exports.ROBOCORP_OPEN_ROBOT_TREE_SELECTION = "robocorp.openRobotTreeSelection"; // Configure Task Package (Robot) (robot.yaml)
exports.ROBOCORP_OPEN_ROBOT_CONDA_TREE_SELECTION = "robocorp.openRobotCondaTreeSelection"; // Configure Dependencies (conda.yaml)
exports.ROBOCORP_OPEN_PACKAGE_YAML_TREE_SELECTION = "robocorp.openPackageYamlTreeSelection"; // Configure Action Package (package.yaml)
exports.ROBOCORP_OPEN_EXTERNALLY = "robocorp.openExternally"; // Open externally
exports.ROBOCORP_OPEN_IN_VS_CODE = "robocorp.openInVSCode"; // Open in VSCode
exports.ROBOCORP_REVEAL_IN_EXPLORER = "robocorp.revealInExplorer"; // Reveal in File Explorer
exports.ROBOCORP_REVEAL_ROBOT_IN_EXPLORER = "robocorp.revealRobotInExplorer"; // Reveal robot.yaml in File Explorer
exports.ROBOCORP_CLOUD_UPLOAD_ROBOT_TREE_SELECTION = "robocorp.cloudUploadRobotTreeSelection"; // Upload Task Package (Robot) to Control Room
exports.ROBOCORP_CREATE_RCC_TERMINAL_TREE_SELECTION = "robocorp.rccTerminalCreateRobotTreeSelection"; // Open terminal with Package Python environment
exports.ROBOCORP_SEND_METRIC = "robocorp.sendMetric"; // Send metric
exports.ROBOCORP_SUBMIT_ISSUE_INTERNAL = "robocorp.submitIssue.internal"; // Submit issue (internal)
exports.ROBOCORP_SUBMIT_ISSUE = "robocorp.submitIssue"; // Submit issue to Robocorp
exports.ROBOCORP_INSPECTOR_INTERNAL = "robocorp.inspector.internal"; // Inspector Manager (internal)
exports.ROBOCORP_INSPECTOR = "robocorp.inspector"; // Open Inspector
exports.ROBOCORP_INSPECTOR_DUPLICATE = "robocorp.inspector.duplicate"; // Create & manage locators
exports.ROBOCORP_ERROR_FEEDBACK_INTERNAL = "robocorp.errorFeedback.internal"; // Error feedback (internal)
exports.ROBOCORP_FEEDBACK_INTERNAL = "robocorp.feedback.internal"; // Feedback (internal)
exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS_INTERNAL = "robocorp.configuration.diagnostics.internal"; // Task Package (Robot) Configuration Diagnostics (internal)
exports.ROBOCORP_CONFIGURATION_DIAGNOSTICS = "robocorp.configuration.diagnostics"; // Task Package (Robot) Configuration Diagnostics
exports.ROBOCORP_RCC_TERMINAL_NEW = "robocorp.rccTerminalNew"; // Terminal with Task Package (Robot) environment
exports.ROBOCORP_LIST_WORK_ITEMS_INTERNAL = "robocorp.listWorkItems.internal"; // Lists the work items available for a Task Package (Robot)
exports.ROBOCORP_UPDATE_LAUNCH_ENV = "robocorp.updateLaunchEnv"; // Updates the environment variables used for some launch (given a Task Package (Robot))
exports.ROBOCORP_UPDATE_LAUNCH_ENV_GET_VAULT_ENV_INTERNAL = "robocorp.updateLaunchEnv.getVaultEnv.internal"; // Provides the environment variables related to the vault.
exports.ROBOCORP_NEW_WORK_ITEM_IN_WORK_ITEMS_VIEW = "robocorp.newWorkItemInWorkItemsView"; // New Work Item
exports.ROBOCORP_DELETE_WORK_ITEM_IN_WORK_ITEMS_VIEW = "robocorp.deleteWorkItemInWorkItemsView"; // Delete Work Item
exports.ROBOCORP_HELP_WORK_ITEMS = "robocorp.helpWorkItems"; // Work Items Help
exports.ROBOCORP_CONVERT_OUTPUT_WORK_ITEM_TO_INPUT = "robocorp.convertOutputWorkItemToInput"; // Convert output work item to input
exports.ROBOCORP_VERIFY_LIBRARY_VERSION_INTERNAL = "robocorp.verifyLibraryVersion.internal"; // Collect a library version and verify if it matches some expected version
exports.ROBOCORP_CONNECT_WORKSPACE = "robocorp.connectWorkspace"; // Connect to Control Room Workspace (vault, storage, ...)
exports.ROBOCORP_DISCONNECT_WORKSPACE = "robocorp.disconnectWorkspace"; // Disconnect from Control Room Workspace
exports.ROBOCORP_GET_CONNECTED_VAULT_WORKSPACE_INTERNAL = "robocorp.getConnectedVaultWorkspace.internal"; // Gets workspace id currently connected
exports.ROBOCORP_SET_CONNECTED_VAULT_WORKSPACE_INTERNAL = "robocorp.setConnectedVaultWorkspace.internal"; // Sets the currently connected Control Room Workspace
exports.ROBOCORP_OPEN_VAULT_HELP = "robocorp.openVaultHelp"; // Open vault help
exports.ROBOCORP_CLEAR_ENV_AND_RESTART = "robocorp.clearEnvAndRestart"; // Clear Robocorp (RCC) environments and restart Robocorp Code
exports.ROBOCORP_SHOW_OUTPUT = "robocorp.showOutput"; // Show Robocorp Code > Output logs
exports.ROBOCORP_SHOW_INTERPRETER_ENV_ERROR = "robocorp.showInterpreterEnvError"; // Show error related to interpreter env creation
exports.ROBOCORP_OPEN_FLOW_EXPLORER_TREE_SELECTION = "robocorp.openFlowExplorerTreeSelection"; // Open Flow Explorer
exports.ROBOCORP_CONVERT_PROJECT = "robocorp.convertProject"; // Conversion Accelerator from third party RPA to Robocorp Task Package (Robot)
exports.ROBOCORP_PROFILE_IMPORT = "robocorp.profileImport"; // Import Profile
exports.ROBOCORP_PROFILE_IMPORT_INTERNAL = "robocorp.profileImport.internal"; // Import Profile (internal)
exports.ROBOCORP_PROFILE_SWITCH = "robocorp.profileSwitch"; // Switch Profile
exports.ROBOCORP_PROFILE_SWITCH_INTERNAL = "robocorp.profileSwitch.internal"; // Switch Profile
exports.ROBOCORP_PROFILE_LIST_INTERNAL = "robocorp.profileList.internal"; // List Profiles
exports.ROBOCORP_HAS_PRE_RUN_SCRIPTS_INTERNAL = "robocorp.hasPreRunScripts.internal"; // Has Pre Run Scripts
exports.ROBOCORP_RUN_PRE_RUN_SCRIPTS_INTERNAL = "robocorp.runPreRunScripts.internal"; // Run Pre Run Scripts
exports.ROBOCORP_GET_PY_PI_BASE_URLS_INTERNAL = "robocorp.getPyPiBaseUrls.internal"; // Get PyPi base urls
exports.ROBOCORP_START_ACTION_SERVER = "robocorp.startActionServer"; // Start Action Server
exports.ROBOCORP_DOWNLOAD_ACTION_SERVER = "robocorp.downloadActionServer"; // Download Action Server
exports.ROBOCORP_START_ACTION_SERVER_INTERNAL = "robocorp.startActionServer.internal"; // Start Action Server (internal)
exports.ROBOCORP_LIST_ACTIONS_INTERNAL = "robocorp.listActions.internal"; // Lists the actions available in an action package given a root dir (internal)
exports.ROBOCORP_PACKAGE_ENVIRONMENT_REBUILD = "robocorp.packageEnvironmentRebuild"; // Rebuild Package Environment
//# sourceMappingURL=robocorpCommands.js.map