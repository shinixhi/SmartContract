"use strict";
// Warning: Don't edit file (autogenerated from python -m dev codegen).
Object.defineProperty(exports, "__esModule", { value: true });
exports.setActionserverLocation = exports.getActionserverLocation = exports.setCodelensRobolaunch = exports.getCodelensRobolaunch = exports.setVaulttokentimeoutinminutes = exports.getVaulttokentimeoutinminutes = exports.setProceedwithlongpathsdisabled = exports.getProceedwithlongpathsdisabled = exports.setAutosetpythonextensiondisableactivateterminal = exports.getAutosetpythonextensiondisableactivateterminal = exports.setAutosetpythonextensioninterpreter = exports.getAutosetpythonextensioninterpreter = exports.setVerifylsp = exports.getVerifylsp = exports.setHome = exports.getHome = exports.setRccConfigLocation = exports.getRccConfigLocation = exports.setRccEndpoint = exports.getRccEndpoint = exports.setRccLocation = exports.getRccLocation = exports.setLanguageServerPython = exports.getLanguageServerPython = exports.setLanguageServerArgs = exports.getLanguageServerArgs = exports.setLanguageServerTcpPort = exports.getLanguageServerTcpPort = exports.ROBOCORP_ACTION_SERVER_LOCATION = exports.ROBOCORP_CODE_LENS_ROBO_LAUNCH = exports.ROBOCORP_VAULT_TOKEN_TIMEOUT_IN_MINUTES = exports.ROBOCORP_PROCEED_WITH_LONG_PATHS_DISABLED = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_DISABLE_ACTIVATE_TERMINAL = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER = exports.ROBOCORP_VERIFY_LSP = exports.ROBOCORP_HOME = exports.ROBOCORP_RCC_CONFIG_LOCATION = exports.ROBOCORP_RCC_ENDPOINT = exports.ROBOCORP_RCC_LOCATION = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON = exports.ROBOCORP_LANGUAGE_SERVER_ARGS = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT = exports.get = void 0;
const vscode_1 = require("vscode");
function get(key) {
    var dot = key.lastIndexOf('.');
    var section = key.substring(0, dot);
    var name = key.substring(dot + 1);
    return vscode_1.workspace.getConfiguration(section).get(name);
}
exports.get = get;
exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT = "robocorp.language-server.tcp-port";
exports.ROBOCORP_LANGUAGE_SERVER_ARGS = "robocorp.language-server.args";
exports.ROBOCORP_LANGUAGE_SERVER_PYTHON = "robocorp.language-server.python";
exports.ROBOCORP_RCC_LOCATION = "robocorp.rcc.location";
exports.ROBOCORP_RCC_ENDPOINT = "robocorp.rcc.endpoint";
exports.ROBOCORP_RCC_CONFIG_LOCATION = "robocorp.rcc.config_location";
exports.ROBOCORP_HOME = "robocorp.home";
exports.ROBOCORP_VERIFY_LSP = "robocorp.verifyLSP";
exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER = "robocorp.autoSetPythonExtensionInterpreter";
exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_DISABLE_ACTIVATE_TERMINAL = "robocorp.autoSetPythonExtensionDisableActivateTerminal";
exports.ROBOCORP_PROCEED_WITH_LONG_PATHS_DISABLED = "robocorp.proceedWithLongPathsDisabled";
exports.ROBOCORP_VAULT_TOKEN_TIMEOUT_IN_MINUTES = "robocorp.vaultTokenTimeoutInMinutes";
exports.ROBOCORP_CODE_LENS_ROBO_LAUNCH = "robocorp.codeLens.roboLaunch";
exports.ROBOCORP_ACTION_SERVER_LOCATION = "robocorp.actionServer.location";
function getLanguageServerTcpPort() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT;
    return get(key);
}
exports.getLanguageServerTcpPort = getLanguageServerTcpPort;
async function setLanguageServerTcpPort(value) {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setLanguageServerTcpPort = setLanguageServerTcpPort;
function getLanguageServerArgs() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_ARGS;
    return get(key);
}
exports.getLanguageServerArgs = getLanguageServerArgs;
async function setLanguageServerArgs(value) {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_ARGS;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setLanguageServerArgs = setLanguageServerArgs;
function getLanguageServerPython() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON;
    return get(key);
}
exports.getLanguageServerPython = getLanguageServerPython;
async function setLanguageServerPython(value) {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setLanguageServerPython = setLanguageServerPython;
function getRccLocation() {
    let key = exports.ROBOCORP_RCC_LOCATION;
    return get(key);
}
exports.getRccLocation = getRccLocation;
async function setRccLocation(value) {
    let key = exports.ROBOCORP_RCC_LOCATION;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setRccLocation = setRccLocation;
function getRccEndpoint() {
    let key = exports.ROBOCORP_RCC_ENDPOINT;
    return get(key);
}
exports.getRccEndpoint = getRccEndpoint;
async function setRccEndpoint(value) {
    let key = exports.ROBOCORP_RCC_ENDPOINT;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setRccEndpoint = setRccEndpoint;
function getRccConfigLocation() {
    let key = exports.ROBOCORP_RCC_CONFIG_LOCATION;
    return get(key);
}
exports.getRccConfigLocation = getRccConfigLocation;
async function setRccConfigLocation(value) {
    let key = exports.ROBOCORP_RCC_CONFIG_LOCATION;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setRccConfigLocation = setRccConfigLocation;
function getHome() {
    let key = exports.ROBOCORP_HOME;
    return get(key);
}
exports.getHome = getHome;
async function setHome(value) {
    let key = exports.ROBOCORP_HOME;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setHome = setHome;
function getVerifylsp() {
    let key = exports.ROBOCORP_VERIFY_LSP;
    return get(key);
}
exports.getVerifylsp = getVerifylsp;
async function setVerifylsp(value) {
    let key = exports.ROBOCORP_VERIFY_LSP;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setVerifylsp = setVerifylsp;
function getAutosetpythonextensioninterpreter() {
    let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER;
    return get(key);
}
exports.getAutosetpythonextensioninterpreter = getAutosetpythonextensioninterpreter;
async function setAutosetpythonextensioninterpreter(value) {
    let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setAutosetpythonextensioninterpreter = setAutosetpythonextensioninterpreter;
function getAutosetpythonextensiondisableactivateterminal() {
    let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_DISABLE_ACTIVATE_TERMINAL;
    return get(key);
}
exports.getAutosetpythonextensiondisableactivateterminal = getAutosetpythonextensiondisableactivateterminal;
async function setAutosetpythonextensiondisableactivateterminal(value) {
    let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_DISABLE_ACTIVATE_TERMINAL;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setAutosetpythonextensiondisableactivateterminal = setAutosetpythonextensiondisableactivateterminal;
function getProceedwithlongpathsdisabled() {
    let key = exports.ROBOCORP_PROCEED_WITH_LONG_PATHS_DISABLED;
    return get(key);
}
exports.getProceedwithlongpathsdisabled = getProceedwithlongpathsdisabled;
async function setProceedwithlongpathsdisabled(value) {
    let key = exports.ROBOCORP_PROCEED_WITH_LONG_PATHS_DISABLED;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setProceedwithlongpathsdisabled = setProceedwithlongpathsdisabled;
function getVaulttokentimeoutinminutes() {
    let key = exports.ROBOCORP_VAULT_TOKEN_TIMEOUT_IN_MINUTES;
    return get(key);
}
exports.getVaulttokentimeoutinminutes = getVaulttokentimeoutinminutes;
async function setVaulttokentimeoutinminutes(value) {
    let key = exports.ROBOCORP_VAULT_TOKEN_TIMEOUT_IN_MINUTES;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setVaulttokentimeoutinminutes = setVaulttokentimeoutinminutes;
function getCodelensRobolaunch() {
    let key = exports.ROBOCORP_CODE_LENS_ROBO_LAUNCH;
    return get(key);
}
exports.getCodelensRobolaunch = getCodelensRobolaunch;
async function setCodelensRobolaunch(value) {
    let key = exports.ROBOCORP_CODE_LENS_ROBO_LAUNCH;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setCodelensRobolaunch = setCodelensRobolaunch;
function getActionserverLocation() {
    let key = exports.ROBOCORP_ACTION_SERVER_LOCATION;
    return get(key);
}
exports.getActionserverLocation = getActionserverLocation;
async function setActionserverLocation(value) {
    let key = exports.ROBOCORP_ACTION_SERVER_LOCATION;
    let i = key.lastIndexOf('.');
    let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
    await config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
}
exports.setActionserverLocation = setActionserverLocation;
//# sourceMappingURL=robocorpSettings.js.map